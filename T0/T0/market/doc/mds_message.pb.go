// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.10.1
// source: mds_message.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//消息类型定义
type MsgType int32

const (
	MsgType_Heartbeat_Notify MsgType = 0
	//证券行情推送
	MsgType_Notify_Quotation_Stock MsgType = 1
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "Heartbeat_Notify",
		1: "Notify_Quotation_Stock",
	}
	MsgType_value = map[string]int32{
		"Heartbeat_Notify":       0,
		"Notify_Quotation_Stock": 1,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_mds_message_proto_enumTypes[0].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_mds_message_proto_enumTypes[0]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{0}
}

type StockQuotationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockQuotations []*StockQuotation `protobuf:"bytes,1,rep,name=stock_quotations,json=stockQuotations,proto3" json:"stock_quotations,omitempty"`
}

func (x *StockQuotationList) Reset() {
	*x = StockQuotationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuotationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuotationList) ProtoMessage() {}

func (x *StockQuotationList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuotationList.ProtoReflect.Descriptor instead.
func (*StockQuotationList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{0}
}

func (x *StockQuotationList) GetStockQuotations() []*StockQuotation {
	if x != nil {
		return x.StockQuotations
	}
	return nil
}

//证券行情消息
type StockQuotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time            int32   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID     string  `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID   string  `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	OpenPrice       int64   `protobuf:"varint,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice       int64   `protobuf:"varint,5,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice        int64   `protobuf:"varint,6,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	LastPrice       int64   `protobuf:"varint,7,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	NumTrades       int64   `protobuf:"varint,8,opt,name=num_trades,json=numTrades,proto3" json:"num_trades,omitempty"`
	TotalVolume     int64   `protobuf:"varint,9,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TotalValue      int64   `protobuf:"varint,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	AskPrice        []int64 `protobuf:"varint,11,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskSize         []int64 `protobuf:"varint,12,rep,packed,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	BidPrice        []int64 `protobuf:"varint,13,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidSize         []int64 `protobuf:"varint,14,rep,packed,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	AfterPrice      int64   `protobuf:"varint,15,opt,name=after_price,json=afterPrice,proto3" json:"after_price,omitempty"`                  //盘后价格
	AfterVolume     int64   `protobuf:"varint,16,opt,name=after_volume,json=afterVolume,proto3" json:"after_volume,omitempty"`               //盘后量
	AfterTurnover   int64   `protobuf:"varint,17,opt,name=after_turnover,json=afterTurnover,proto3" json:"after_turnover,omitempty"`         //盘后成交金额
	AfterMatchItems int64   `protobuf:"varint,18,opt,name=after_match_items,json=afterMatchItems,proto3" json:"after_match_items,omitempty"` //盘后成交笔数
	PreClosePrice   int64   `protobuf:"varint,19,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`
	HighLimited     int64   `protobuf:"varint,20,opt,name=high_limited,json=highLimited,proto3" json:"high_limited,omitempty"`
	LowLimited      int64   `protobuf:"varint,21,opt,name=low_limited,json=lowLimited,proto3" json:"low_limited,omitempty"`
	IOPV            int64   `protobuf:"varint,22,opt,name=IOPV,proto3" json:"IOPV,omitempty"`
	TotalBidVol     int64   `protobuf:"varint,23,opt,name=total_bid_vol,json=totalBidVol,proto3" json:"total_bid_vol,omitempty"`
	TotalAskVol     int64   `protobuf:"varint,24,opt,name=total_ask_vol,json=totalAskVol,proto3" json:"total_ask_vol,omitempty"`
	AvgAskPrice     int64   `protobuf:"varint,25,opt,name=avg_ask_price,json=avgAskPrice,proto3" json:"avg_ask_price,omitempty"`
	AvgBidPrice     int64   `protobuf:"varint,26,opt,name=avg_bid_price,json=avgBidPrice,proto3" json:"avg_bid_price,omitempty"`
	ServerTime      int64   `protobuf:"varint,27,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (x *StockQuotation) Reset() {
	*x = StockQuotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuotation) ProtoMessage() {}

func (x *StockQuotation) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuotation.ProtoReflect.Descriptor instead.
func (*StockQuotation) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{1}
}

func (x *StockQuotation) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockQuotation) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *StockQuotation) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *StockQuotation) GetOpenPrice() int64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *StockQuotation) GetHighPrice() int64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *StockQuotation) GetLowPrice() int64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *StockQuotation) GetLastPrice() int64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *StockQuotation) GetNumTrades() int64 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *StockQuotation) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockQuotation) GetTotalValue() int64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *StockQuotation) GetAskPrice() []int64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *StockQuotation) GetAskSize() []int64 {
	if x != nil {
		return x.AskSize
	}
	return nil
}

func (x *StockQuotation) GetBidPrice() []int64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *StockQuotation) GetBidSize() []int64 {
	if x != nil {
		return x.BidSize
	}
	return nil
}

func (x *StockQuotation) GetAfterPrice() int64 {
	if x != nil {
		return x.AfterPrice
	}
	return 0
}

func (x *StockQuotation) GetAfterVolume() int64 {
	if x != nil {
		return x.AfterVolume
	}
	return 0
}

func (x *StockQuotation) GetAfterTurnover() int64 {
	if x != nil {
		return x.AfterTurnover
	}
	return 0
}

func (x *StockQuotation) GetAfterMatchItems() int64 {
	if x != nil {
		return x.AfterMatchItems
	}
	return 0
}

func (x *StockQuotation) GetPreClosePrice() int64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *StockQuotation) GetHighLimited() int64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *StockQuotation) GetLowLimited() int64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *StockQuotation) GetIOPV() int64 {
	if x != nil {
		return x.IOPV
	}
	return 0
}

func (x *StockQuotation) GetTotalBidVol() int64 {
	if x != nil {
		return x.TotalBidVol
	}
	return 0
}

func (x *StockQuotation) GetTotalAskVol() int64 {
	if x != nil {
		return x.TotalAskVol
	}
	return 0
}

func (x *StockQuotation) GetAvgAskPrice() int64 {
	if x != nil {
		return x.AvgAskPrice
	}
	return 0
}

func (x *StockQuotation) GetAvgBidPrice() int64 {
	if x != nil {
		return x.AvgBidPrice
	}
	return 0
}

func (x *StockQuotation) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

//与Request相同,把所有的XxxxxNotification消息集合在一起当作联合体使用.
type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockQuotationList *StockQuotationList `protobuf:"bytes,2,opt,name=stock_quotation_list,json=stockQuotationList,proto3" json:"stock_quotation_list,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{2}
}

func (x *Notify) GetStockQuotationList() *StockQuotationList {
	if x != nil {
		return x.StockQuotationList
	}
	return nil
}

//顶层消息，包含所有的Request，Response，Notification，具体包含哪个消息又msg_type字段决定，程序逻辑去保证msg_type和具体的消息进行匹配
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType   MsgType `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3,enum=MsgType" json:"msg_type,omitempty"`
	Sequence  uint64  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"` //消息系列号
	SessionId uint32  `protobuf:"fixed32,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Notify    *Notify `protobuf:"bytes,6,opt,name=notify,proto3" json:"notify,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_Heartbeat_Notify
}

func (x *Message) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Message) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Message) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

var File_mds_message_proto protoreflect.FileDescriptor

var file_mds_message_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x10, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xff, 0x06, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07,
	0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x4f, 0x50, 0x56, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x49, 0x4f, 0x50, 0x56, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x22,
	0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x42, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x45, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x2a, 0x3b, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x10, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mds_message_proto_rawDescOnce sync.Once
	file_mds_message_proto_rawDescData = file_mds_message_proto_rawDesc
)

func file_mds_message_proto_rawDescGZIP() []byte {
	file_mds_message_proto_rawDescOnce.Do(func() {
		file_mds_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_mds_message_proto_rawDescData)
	})
	return file_mds_message_proto_rawDescData
}

var file_mds_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mds_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mds_message_proto_goTypes = []interface{}{
	(MsgType)(0),               // 0: MsgType
	(*StockQuotationList)(nil), // 1: StockQuotationList
	(*StockQuotation)(nil),     // 2: StockQuotation
	(*Notify)(nil),             // 3: Notify
	(*Message)(nil),            // 4: Message
}
var file_mds_message_proto_depIdxs = []int32{
	2, // 0: StockQuotationList.stock_quotations:type_name -> StockQuotation
	1, // 1: Notify.stock_quotation_list:type_name -> StockQuotationList
	0, // 2: Message.msg_type:type_name -> MsgType
	3, // 3: Message.notify:type_name -> Notify
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_mds_message_proto_init() }
func file_mds_message_proto_init() {
	if File_mds_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mds_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuotationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mds_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mds_message_proto_goTypes,
		DependencyIndexes: file_mds_message_proto_depIdxs,
		EnumInfos:         file_mds_message_proto_enumTypes,
		MessageInfos:      file_mds_message_proto_msgTypes,
	}.Build()
	File_mds_message_proto = out.File
	file_mds_message_proto_rawDesc = nil
	file_mds_message_proto_goTypes = nil
	file_mds_message_proto_depIdxs = nil
}
