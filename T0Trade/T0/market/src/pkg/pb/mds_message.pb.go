// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.10.1
// source: mds_message.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//消息类型定义
type MsgType int32

const (
	MsgType_Heartbeat_Notify                MsgType = 0
	MsgType_Qry_Secu_Instruments_Request    MsgType = 10001
	MsgType_Qry_Secu_Instruments_Response   MsgType = 10002
	MsgType_Qry_Stock_Quotation_Request     MsgType = 10003
	MsgType_Qry_Stock_Quotation_Response    MsgType = 10004
	MsgType_Qry_Future_Instruments_Request  MsgType = 10005
	MsgType_Qry_Future_Instruments_Response MsgType = 10006
	MsgType_Qry_Future_Quotation_Request    MsgType = 10007
	MsgType_Qry_Future_Quotation_Response   MsgType = 10008
	MsgType_Qry_Tick_Indicator_Request      MsgType = 10000
	MsgType_Qry_Tick_Indicator_Response     MsgType = 10010
	MsgType_Qry_Minute_Indicator_Request    MsgType = 10011
	MsgType_Qry_Minute_Indicator_Response   MsgType = 10012
	MsgType_Qry_Index_Quotation_Request     MsgType = 10013
	MsgType_Qry_Index_Quotation_Response    MsgType = 10014
	//证券行情推送
	MsgType_Notify_Quotation_Stock MsgType = 20001
	//指数行情推送
	MsgType_Notify_Quotation_Index MsgType = 20002
	//期货行情推送
	MsgType_Notify_Quotation_Future MsgType = 20003
	//期权行情推送
	MsgType_Notify_Quotation_Option MsgType = 20004
	//逐笔指标推送
	MsgType_Notify_Indicator_Tick MsgType = 20005
	//分钟指标推送
	MsgType_Notify_Indicator_Minute MsgType = 20006
	//证券逐笔委托推送
	MsgType_Notify_Transaction_Order MsgType = 20007
	//证券逐笔成交推送
	MsgType_Notify_Transaction_Trade MsgType = 20008
	//证券委托队列推送
	MsgType_Notify_Stock_Order_Queue MsgType = 20009
	//证券合约信息推送
	MsgType_Notify_Secu_Instrument MsgType = 20010
	//期货合约信息推送
	MsgType_Notify_Future_Instrument MsgType = 20011
	//分钟信号推送
	MsgType_Notify_Signal_Minute MsgType = 20012
	//Tick信号推送
	MsgType_Notify_Signal_Tick MsgType = 20013
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:     "Heartbeat_Notify",
		10001: "Qry_Secu_Instruments_Request",
		10002: "Qry_Secu_Instruments_Response",
		10003: "Qry_Stock_Quotation_Request",
		10004: "Qry_Stock_Quotation_Response",
		10005: "Qry_Future_Instruments_Request",
		10006: "Qry_Future_Instruments_Response",
		10007: "Qry_Future_Quotation_Request",
		10008: "Qry_Future_Quotation_Response",
		10000: "Qry_Tick_Indicator_Request",
		10010: "Qry_Tick_Indicator_Response",
		10011: "Qry_Minute_Indicator_Request",
		10012: "Qry_Minute_Indicator_Response",
		10013: "Qry_Index_Quotation_Request",
		10014: "Qry_Index_Quotation_Response",
		20001: "Notify_Quotation_Stock",
		20002: "Notify_Quotation_Index",
		20003: "Notify_Quotation_Future",
		20004: "Notify_Quotation_Option",
		20005: "Notify_Indicator_Tick",
		20006: "Notify_Indicator_Minute",
		20007: "Notify_Transaction_Order",
		20008: "Notify_Transaction_Trade",
		20009: "Notify_Stock_Order_Queue",
		20010: "Notify_Secu_Instrument",
		20011: "Notify_Future_Instrument",
		20012: "Notify_Signal_Minute",
		20013: "Notify_Signal_Tick",
	}
	MsgType_value = map[string]int32{
		"Heartbeat_Notify":                0,
		"Qry_Secu_Instruments_Request":    10001,
		"Qry_Secu_Instruments_Response":   10002,
		"Qry_Stock_Quotation_Request":     10003,
		"Qry_Stock_Quotation_Response":    10004,
		"Qry_Future_Instruments_Request":  10005,
		"Qry_Future_Instruments_Response": 10006,
		"Qry_Future_Quotation_Request":    10007,
		"Qry_Future_Quotation_Response":   10008,
		"Qry_Tick_Indicator_Request":      10000,
		"Qry_Tick_Indicator_Response":     10010,
		"Qry_Minute_Indicator_Request":    10011,
		"Qry_Minute_Indicator_Response":   10012,
		"Qry_Index_Quotation_Request":     10013,
		"Qry_Index_Quotation_Response":    10014,
		"Notify_Quotation_Stock":          20001,
		"Notify_Quotation_Index":          20002,
		"Notify_Quotation_Future":         20003,
		"Notify_Quotation_Option":         20004,
		"Notify_Indicator_Tick":           20005,
		"Notify_Indicator_Minute":         20006,
		"Notify_Transaction_Order":        20007,
		"Notify_Transaction_Trade":        20008,
		"Notify_Stock_Order_Queue":        20009,
		"Notify_Secu_Instrument":          20010,
		"Notify_Future_Instrument":        20011,
		"Notify_Signal_Minute":            20012,
		"Notify_Signal_Tick":              20013,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_mds_message_proto_enumTypes[0].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_mds_message_proto_enumTypes[0]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{0}
}

//
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{0}
}

//
type QryMinuteIndicatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QryMinuteIndicatorRequest) Reset() {
	*x = QryMinuteIndicatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryMinuteIndicatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryMinuteIndicatorRequest) ProtoMessage() {}

func (x *QryMinuteIndicatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryMinuteIndicatorRequest.ProtoReflect.Descriptor instead.
func (*QryMinuteIndicatorRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{1}
}

func (x *QryMinuteIndicatorRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QryMinuteIndicatorRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type MinuteIndicatorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinuteIndicators []*MinuteIndicator `protobuf:"bytes,1,rep,name=minute_indicators,json=minuteIndicators,proto3" json:"minute_indicators,omitempty"`
}

func (x *MinuteIndicatorList) Reset() {
	*x = MinuteIndicatorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinuteIndicatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinuteIndicatorList) ProtoMessage() {}

func (x *MinuteIndicatorList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinuteIndicatorList.ProtoReflect.Descriptor instead.
func (*MinuteIndicatorList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{2}
}

func (x *MinuteIndicatorList) GetMinuteIndicators() []*MinuteIndicator {
	if x != nil {
		return x.MinuteIndicators
	}
	return nil
}

//
type QryTickIndicatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QryTickIndicatorRequest) Reset() {
	*x = QryTickIndicatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryTickIndicatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryTickIndicatorRequest) ProtoMessage() {}

func (x *QryTickIndicatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryTickIndicatorRequest.ProtoReflect.Descriptor instead.
func (*QryTickIndicatorRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{3}
}

func (x *QryTickIndicatorRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QryTickIndicatorRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type TickIndicatorList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickIndicators []*TickIndicator `protobuf:"bytes,1,rep,name=tick_indicators,json=tickIndicators,proto3" json:"tick_indicators,omitempty"`
}

func (x *TickIndicatorList) Reset() {
	*x = TickIndicatorList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickIndicatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickIndicatorList) ProtoMessage() {}

func (x *TickIndicatorList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickIndicatorList.ProtoReflect.Descriptor instead.
func (*TickIndicatorList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{4}
}

func (x *TickIndicatorList) GetTickIndicators() []*TickIndicator {
	if x != nil {
		return x.TickIndicators
	}
	return nil
}

//
type QryStockQuotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QryStockQuotationRequest) Reset() {
	*x = QryStockQuotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryStockQuotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryStockQuotationRequest) ProtoMessage() {}

func (x *QryStockQuotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryStockQuotationRequest.ProtoReflect.Descriptor instead.
func (*QryStockQuotationRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{5}
}

func (x *QryStockQuotationRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QryStockQuotationRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type StockQuotationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockQuotations []*StockQuotation `protobuf:"bytes,1,rep,name=stock_quotations,json=stockQuotations,proto3" json:"stock_quotations,omitempty"`
}

func (x *StockQuotationList) Reset() {
	*x = StockQuotationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuotationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuotationList) ProtoMessage() {}

func (x *StockQuotationList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuotationList.ProtoReflect.Descriptor instead.
func (*StockQuotationList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{6}
}

func (x *StockQuotationList) GetStockQuotations() []*StockQuotation {
	if x != nil {
		return x.StockQuotations
	}
	return nil
}

//
type QryIndexQuotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QryIndexQuotationRequest) Reset() {
	*x = QryIndexQuotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryIndexQuotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryIndexQuotationRequest) ProtoMessage() {}

func (x *QryIndexQuotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryIndexQuotationRequest.ProtoReflect.Descriptor instead.
func (*QryIndexQuotationRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{7}
}

func (x *QryIndexQuotationRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QryIndexQuotationRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type IndexQuotationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexQuotations []*IndexQuotation `protobuf:"bytes,1,rep,name=index_quotations,json=indexQuotations,proto3" json:"index_quotations,omitempty"`
}

func (x *IndexQuotationList) Reset() {
	*x = IndexQuotationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexQuotationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexQuotationList) ProtoMessage() {}

func (x *IndexQuotationList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexQuotationList.ProtoReflect.Descriptor instead.
func (*IndexQuotationList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{8}
}

func (x *IndexQuotationList) GetIndexQuotations() []*IndexQuotation {
	if x != nil {
		return x.IndexQuotations
	}
	return nil
}

//
type QryFutureQuotationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QryFutureQuotationRequest) Reset() {
	*x = QryFutureQuotationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryFutureQuotationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryFutureQuotationRequest) ProtoMessage() {}

func (x *QryFutureQuotationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryFutureQuotationRequest.ProtoReflect.Descriptor instead.
func (*QryFutureQuotationRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{9}
}

func (x *QryFutureQuotationRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QryFutureQuotationRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type FutureQuotationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureQuotations []*FutureQuotation `protobuf:"bytes,1,rep,name=future_quotations,json=futureQuotations,proto3" json:"future_quotations,omitempty"`
}

func (x *FutureQuotationList) Reset() {
	*x = FutureQuotationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureQuotationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureQuotationList) ProtoMessage() {}

func (x *FutureQuotationList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureQuotationList.ProtoReflect.Descriptor instead.
func (*FutureQuotationList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{10}
}

func (x *FutureQuotationList) GetFutureQuotations() []*FutureQuotation {
	if x != nil {
		return x.FutureQuotations
	}
	return nil
}

//
type QrySecuInstrumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QrySecuInstrumentsRequest) Reset() {
	*x = QrySecuInstrumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QrySecuInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QrySecuInstrumentsRequest) ProtoMessage() {}

func (x *QrySecuInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QrySecuInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*QrySecuInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{11}
}

func (x *QrySecuInstrumentsRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QrySecuInstrumentsRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type SecuInstrumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecuInstruments []*SecuInstrument `protobuf:"bytes,1,rep,name=secu_instruments,json=secuInstruments,proto3" json:"secu_instruments,omitempty"`
}

func (x *SecuInstrumentList) Reset() {
	*x = SecuInstrumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuInstrumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuInstrumentList) ProtoMessage() {}

func (x *SecuInstrumentList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuInstrumentList.ProtoReflect.Descriptor instead.
func (*SecuInstrumentList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{12}
}

func (x *SecuInstrumentList) GetSecuInstruments() []*SecuInstrument {
	if x != nil {
		return x.SecuInstruments
	}
	return nil
}

//
type QryFutureInstrumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID   string `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *QryFutureInstrumentsRequest) Reset() {
	*x = QryFutureInstrumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QryFutureInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QryFutureInstrumentsRequest) ProtoMessage() {}

func (x *QryFutureInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QryFutureInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*QryFutureInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{13}
}

func (x *QryFutureInstrumentsRequest) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *QryFutureInstrumentsRequest) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type FutureInstrumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FutureInstruments []*FutureInstrument `protobuf:"bytes,1,rep,name=future_instruments,json=futureInstruments,proto3" json:"future_instruments,omitempty"`
}

func (x *FutureInstrumentList) Reset() {
	*x = FutureInstrumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureInstrumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureInstrumentList) ProtoMessage() {}

func (x *FutureInstrumentList) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureInstrumentList.ProtoReflect.Descriptor instead.
func (*FutureInstrumentList) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{14}
}

func (x *FutureInstrumentList) GetFutureInstruments() []*FutureInstrument {
	if x != nil {
		return x.FutureInstruments
	}
	return nil
}

//代码表信息
type SecuInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID    string  `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID  string  `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	InstrumentName []byte  `protobuf:"bytes,3,opt,name=instrument_name,json=instrumentName,proto3" json:"instrument_name,omitempty"`
	StkType        int32   `protobuf:"varint,4,opt,name=stkType,proto3" json:"stkType,omitempty"`
	PreClosePrice  float64 `protobuf:"fixed64,5,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`
	HighLimited    float64 `protobuf:"fixed64,6,opt,name=high_limited,json=highLimited,proto3" json:"high_limited,omitempty"`
	LowLimited     float64 `protobuf:"fixed64,7,opt,name=low_limited,json=lowLimited,proto3" json:"low_limited,omitempty"`
	OpenPrice      float64 `protobuf:"fixed64,12,opt,name=openPrice,proto3" json:"openPrice,omitempty"`
}

func (x *SecuInstrument) Reset() {
	*x = SecuInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuInstrument) ProtoMessage() {}

func (x *SecuInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuInstrument.ProtoReflect.Descriptor instead.
func (*SecuInstrument) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{15}
}

func (x *SecuInstrument) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *SecuInstrument) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *SecuInstrument) GetInstrumentName() []byte {
	if x != nil {
		return x.InstrumentName
	}
	return nil
}

func (x *SecuInstrument) GetStkType() int32 {
	if x != nil {
		return x.StkType
	}
	return 0
}

func (x *SecuInstrument) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *SecuInstrument) GetHighLimited() float64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *SecuInstrument) GetLowLimited() float64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *SecuInstrument) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

type FutureInstrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange_ID    string  `protobuf:"bytes,1,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID  string  `protobuf:"bytes,2,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	InstrumentName []byte  `protobuf:"bytes,3,opt,name=instrument_name,json=instrumentName,proto3" json:"instrument_name,omitempty"`
	StkType        int32   `protobuf:"varint,4,opt,name=stkType,proto3" json:"stkType,omitempty"`
	PreClosePrice  float64 `protobuf:"fixed64,5,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`
	HighLimited    float64 `protobuf:"fixed64,6,opt,name=high_limited,json=highLimited,proto3" json:"high_limited,omitempty"`
	LowLimited     float64 `protobuf:"fixed64,7,opt,name=low_limited,json=lowLimited,proto3" json:"low_limited,omitempty"`
	PreSettlePrice float64 `protobuf:"fixed64,8,opt,name=pre_settle_price,json=preSettlePrice,proto3" json:"pre_settle_price,omitempty"`
	PreDelta       int32   `protobuf:"varint,9,opt,name=pre_delta,json=preDelta,proto3" json:"pre_delta,omitempty"`
	CurrDelta      int32   `protobuf:"varint,10,opt,name=curr_delta,json=currDelta,proto3" json:"curr_delta,omitempty"`
	PrePositions   int64   `protobuf:"varint,11,opt,name=pre_positions,json=prePositions,proto3" json:"pre_positions,omitempty"`
	OpenPrice      float64 `protobuf:"fixed64,12,opt,name=openPrice,proto3" json:"openPrice,omitempty"`
}

func (x *FutureInstrument) Reset() {
	*x = FutureInstrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureInstrument) ProtoMessage() {}

func (x *FutureInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureInstrument.ProtoReflect.Descriptor instead.
func (*FutureInstrument) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{16}
}

func (x *FutureInstrument) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *FutureInstrument) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *FutureInstrument) GetInstrumentName() []byte {
	if x != nil {
		return x.InstrumentName
	}
	return nil
}

func (x *FutureInstrument) GetStkType() int32 {
	if x != nil {
		return x.StkType
	}
	return 0
}

func (x *FutureInstrument) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *FutureInstrument) GetHighLimited() float64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *FutureInstrument) GetLowLimited() float64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *FutureInstrument) GetPreSettlePrice() float64 {
	if x != nil {
		return x.PreSettlePrice
	}
	return 0
}

func (x *FutureInstrument) GetPreDelta() int32 {
	if x != nil {
		return x.PreDelta
	}
	return 0
}

func (x *FutureInstrument) GetCurrDelta() int32 {
	if x != nil {
		return x.CurrDelta
	}
	return 0
}

func (x *FutureInstrument) GetPrePositions() int64 {
	if x != nil {
		return x.PrePositions
	}
	return 0
}

func (x *FutureInstrument) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

//指数行情消息
type IndexQuotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int32   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string  `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string  `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	OpenPrice          float64 `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice          float64 `protobuf:"fixed64,5,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice           float64 `protobuf:"fixed64,6,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	LastPrice          float64 `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	TotalVolume        int64   `protobuf:"varint,8,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TotalValue         float64 `protobuf:"fixed64,9,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	PreClosePrice      float64 `protobuf:"fixed64,10,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`
	ServerReceivedTime int64   `protobuf:"varint,11,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime     int64   `protobuf:"varint,12,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *IndexQuotation) Reset() {
	*x = IndexQuotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexQuotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexQuotation) ProtoMessage() {}

func (x *IndexQuotation) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexQuotation.ProtoReflect.Descriptor instead.
func (*IndexQuotation) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{17}
}

func (x *IndexQuotation) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *IndexQuotation) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *IndexQuotation) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *IndexQuotation) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *IndexQuotation) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *IndexQuotation) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *IndexQuotation) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *IndexQuotation) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *IndexQuotation) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *IndexQuotation) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *IndexQuotation) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *IndexQuotation) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

//证券行情消息
type StockQuotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int32     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string    `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string    `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	OpenPrice          float64   `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice          float64   `protobuf:"fixed64,5,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice           float64   `protobuf:"fixed64,6,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	LastPrice          float64   `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	NumTrades          int64     `protobuf:"varint,8,opt,name=num_trades,json=numTrades,proto3" json:"num_trades,omitempty"`
	TotalVolume        int64     `protobuf:"varint,9,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TotalValue         float64   `protobuf:"fixed64,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	AskPrice           []float64 `protobuf:"fixed64,11,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskSize            []int64   `protobuf:"varint,12,rep,packed,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	BidPrice           []float64 `protobuf:"fixed64,13,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidSize            []int64   `protobuf:"varint,14,rep,packed,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	AfterPrice         float64   `protobuf:"fixed64,15,opt,name=after_price,json=afterPrice,proto3" json:"after_price,omitempty"`                 //盘后价格
	AfterVolume        int64     `protobuf:"varint,16,opt,name=after_volume,json=afterVolume,proto3" json:"after_volume,omitempty"`               //盘后量
	AfterTurnover      int64     `protobuf:"varint,17,opt,name=after_turnover,json=afterTurnover,proto3" json:"after_turnover,omitempty"`         //盘后成交金额
	AfterMatchItems    int64     `protobuf:"varint,18,opt,name=after_match_items,json=afterMatchItems,proto3" json:"after_match_items,omitempty"` //盘后成交笔数
	PreClosePrice      float64   `protobuf:"fixed64,19,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`
	HighLimited        float64   `protobuf:"fixed64,20,opt,name=high_limited,json=highLimited,proto3" json:"high_limited,omitempty"`
	LowLimited         float64   `protobuf:"fixed64,21,opt,name=low_limited,json=lowLimited,proto3" json:"low_limited,omitempty"`
	IOPV               float64   `protobuf:"fixed64,22,opt,name=IOPV,proto3" json:"IOPV,omitempty"`
	TotalBidVol        int64     `protobuf:"varint,23,opt,name=total_bid_vol,json=totalBidVol,proto3" json:"total_bid_vol,omitempty"`
	TotalAskVol        int64     `protobuf:"varint,24,opt,name=total_ask_vol,json=totalAskVol,proto3" json:"total_ask_vol,omitempty"`
	AvgAskPrice        float64   `protobuf:"fixed64,25,opt,name=avg_ask_price,json=avgAskPrice,proto3" json:"avg_ask_price,omitempty"`
	AvgBidPrice        float64   `protobuf:"fixed64,26,opt,name=avg_bid_price,json=avgBidPrice,proto3" json:"avg_bid_price,omitempty"`
	ServerReceivedTime int64     `protobuf:"varint,27,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime     int64     `protobuf:"varint,28,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *StockQuotation) Reset() {
	*x = StockQuotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockQuotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockQuotation) ProtoMessage() {}

func (x *StockQuotation) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockQuotation.ProtoReflect.Descriptor instead.
func (*StockQuotation) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{18}
}

func (x *StockQuotation) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StockQuotation) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *StockQuotation) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *StockQuotation) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *StockQuotation) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *StockQuotation) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *StockQuotation) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *StockQuotation) GetNumTrades() int64 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *StockQuotation) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *StockQuotation) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *StockQuotation) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *StockQuotation) GetAskSize() []int64 {
	if x != nil {
		return x.AskSize
	}
	return nil
}

func (x *StockQuotation) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *StockQuotation) GetBidSize() []int64 {
	if x != nil {
		return x.BidSize
	}
	return nil
}

func (x *StockQuotation) GetAfterPrice() float64 {
	if x != nil {
		return x.AfterPrice
	}
	return 0
}

func (x *StockQuotation) GetAfterVolume() int64 {
	if x != nil {
		return x.AfterVolume
	}
	return 0
}

func (x *StockQuotation) GetAfterTurnover() int64 {
	if x != nil {
		return x.AfterTurnover
	}
	return 0
}

func (x *StockQuotation) GetAfterMatchItems() int64 {
	if x != nil {
		return x.AfterMatchItems
	}
	return 0
}

func (x *StockQuotation) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *StockQuotation) GetHighLimited() float64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *StockQuotation) GetLowLimited() float64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *StockQuotation) GetIOPV() float64 {
	if x != nil {
		return x.IOPV
	}
	return 0
}

func (x *StockQuotation) GetTotalBidVol() int64 {
	if x != nil {
		return x.TotalBidVol
	}
	return 0
}

func (x *StockQuotation) GetTotalAskVol() int64 {
	if x != nil {
		return x.TotalAskVol
	}
	return 0
}

func (x *StockQuotation) GetAvgAskPrice() float64 {
	if x != nil {
		return x.AvgAskPrice
	}
	return 0
}

func (x *StockQuotation) GetAvgBidPrice() float64 {
	if x != nil {
		return x.AvgBidPrice
	}
	return 0
}

func (x *StockQuotation) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *StockQuotation) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

//期货行情消息
type FutureQuotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time                 int32     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID          string    `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID        string    `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	OpenPrice            float64   `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice            float64   `protobuf:"fixed64,5,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice             float64   `protobuf:"fixed64,6,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	LastPrice            float64   `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	NumTrades            int32     `protobuf:"varint,8,opt,name=num_trades,json=numTrades,proto3" json:"num_trades,omitempty"`
	TotalVolume          int64     `protobuf:"varint,9,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TotalValue           float64   `protobuf:"fixed64,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	AskPrice             []float64 `protobuf:"fixed64,11,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskSize              []int64   `protobuf:"varint,12,rep,packed,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	BidPrice             []float64 `protobuf:"fixed64,13,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidSize              []int64   `protobuf:"varint,14,rep,packed,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	SettlePrice          float64   `protobuf:"fixed64,15,opt,name=settle_price,json=settlePrice,proto3" json:"settle_price,omitempty"`
	EstimatedSettlePrice float64   `protobuf:"fixed64,16,opt,name=estimated_settle_price,json=estimatedSettlePrice,proto3" json:"estimated_settle_price,omitempty"`
	PreClosePrice        float64   `protobuf:"fixed64,19,opt,name=pre_close_price,json=preClosePrice,proto3" json:"pre_close_price,omitempty"`
	HighLimited          float64   `protobuf:"fixed64,20,opt,name=high_limited,json=highLimited,proto3" json:"high_limited,omitempty"`
	LowLimited           float64   `protobuf:"fixed64,21,opt,name=low_limited,json=lowLimited,proto3" json:"low_limited,omitempty"`
	ServerReceivedTime   int64     `protobuf:"varint,22,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime       int64     `protobuf:"varint,23,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *FutureQuotation) Reset() {
	*x = FutureQuotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureQuotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureQuotation) ProtoMessage() {}

func (x *FutureQuotation) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureQuotation.ProtoReflect.Descriptor instead.
func (*FutureQuotation) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{19}
}

func (x *FutureQuotation) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FutureQuotation) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *FutureQuotation) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *FutureQuotation) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *FutureQuotation) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *FutureQuotation) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *FutureQuotation) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *FutureQuotation) GetNumTrades() int32 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *FutureQuotation) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *FutureQuotation) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *FutureQuotation) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *FutureQuotation) GetAskSize() []int64 {
	if x != nil {
		return x.AskSize
	}
	return nil
}

func (x *FutureQuotation) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *FutureQuotation) GetBidSize() []int64 {
	if x != nil {
		return x.BidSize
	}
	return nil
}

func (x *FutureQuotation) GetSettlePrice() float64 {
	if x != nil {
		return x.SettlePrice
	}
	return 0
}

func (x *FutureQuotation) GetEstimatedSettlePrice() float64 {
	if x != nil {
		return x.EstimatedSettlePrice
	}
	return 0
}

func (x *FutureQuotation) GetPreClosePrice() float64 {
	if x != nil {
		return x.PreClosePrice
	}
	return 0
}

func (x *FutureQuotation) GetHighLimited() float64 {
	if x != nil {
		return x.HighLimited
	}
	return 0
}

func (x *FutureQuotation) GetLowLimited() float64 {
	if x != nil {
		return x.LowLimited
	}
	return 0
}

func (x *FutureQuotation) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *FutureQuotation) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

//证券行情消息
type OptionQuotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int32     `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string    `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string    `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	OpenPrice          float64   `protobuf:"fixed64,4,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	HighPrice          float64   `protobuf:"fixed64,5,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	LowPrice           float64   `protobuf:"fixed64,6,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	LastPrice          float64   `protobuf:"fixed64,7,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	NumTrades          int32     `protobuf:"varint,8,opt,name=num_trades,json=numTrades,proto3" json:"num_trades,omitempty"`
	TotalVolume        int64     `protobuf:"varint,9,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	TotalValue         float64   `protobuf:"fixed64,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	AskPrice           []float64 `protobuf:"fixed64,11,rep,packed,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	AskSize            []int64   `protobuf:"varint,12,rep,packed,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
	BidPrice           []float64 `protobuf:"fixed64,13,rep,packed,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	BidSize            []int64   `protobuf:"varint,14,rep,packed,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	AuctionPrice       float64   `protobuf:"fixed64,15,opt,name=auction_price,json=auctionPrice,proto3" json:"auction_price,omitempty"`           //动态参考价格
	TotLongPosition    int64     `protobuf:"varint,16,opt,name=tot_long_position,json=totLongPosition,proto3" json:"tot_long_position,omitempty"` //当前合约未平仓数
	AuctionQty         int64     `protobuf:"varint,17,opt,name=auction_qty,json=auctionQty,proto3" json:"auction_qty,omitempty"`                  //虚拟匹配数量
	TradPhaseCode      string    `protobuf:"bytes,18,opt,name=trad_phase_code,json=tradPhaseCode,proto3" json:"trad_phase_code,omitempty"`        //产品实施阶段及标志
	ServerReceivedTime int64     `protobuf:"varint,19,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime     int64     `protobuf:"varint,20,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *OptionQuotation) Reset() {
	*x = OptionQuotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionQuotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionQuotation) ProtoMessage() {}

func (x *OptionQuotation) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionQuotation.ProtoReflect.Descriptor instead.
func (*OptionQuotation) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{20}
}

func (x *OptionQuotation) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *OptionQuotation) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *OptionQuotation) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *OptionQuotation) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *OptionQuotation) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *OptionQuotation) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *OptionQuotation) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *OptionQuotation) GetNumTrades() int32 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *OptionQuotation) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *OptionQuotation) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *OptionQuotation) GetAskPrice() []float64 {
	if x != nil {
		return x.AskPrice
	}
	return nil
}

func (x *OptionQuotation) GetAskSize() []int64 {
	if x != nil {
		return x.AskSize
	}
	return nil
}

func (x *OptionQuotation) GetBidPrice() []float64 {
	if x != nil {
		return x.BidPrice
	}
	return nil
}

func (x *OptionQuotation) GetBidSize() []int64 {
	if x != nil {
		return x.BidSize
	}
	return nil
}

func (x *OptionQuotation) GetAuctionPrice() float64 {
	if x != nil {
		return x.AuctionPrice
	}
	return 0
}

func (x *OptionQuotation) GetTotLongPosition() int64 {
	if x != nil {
		return x.TotLongPosition
	}
	return 0
}

func (x *OptionQuotation) GetAuctionQty() int64 {
	if x != nil {
		return x.AuctionQty
	}
	return 0
}

func (x *OptionQuotation) GetTradPhaseCode() string {
	if x != nil {
		return x.TradPhaseCode
	}
	return ""
}

func (x *OptionQuotation) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *OptionQuotation) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

//分钟指标消息
type MinuteIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          int32              `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID   string             `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string             `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	Indicators    map[string]float64 `protobuf:"bytes,4,rep,name=indicators,proto3" json:"indicators,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MinuteIndicator) Reset() {
	*x = MinuteIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinuteIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinuteIndicator) ProtoMessage() {}

func (x *MinuteIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinuteIndicator.ProtoReflect.Descriptor instead.
func (*MinuteIndicator) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{21}
}

func (x *MinuteIndicator) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MinuteIndicator) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *MinuteIndicator) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *MinuteIndicator) GetIndicators() map[string]float64 {
	if x != nil {
		return x.Indicators
	}
	return nil
}

//分钟信号消息
type MinuteSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          int32              `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID   string             `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string             `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	Signals       map[string]float64 `protobuf:"bytes,4,rep,name=signals,proto3" json:"signals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MinuteSignal) Reset() {
	*x = MinuteSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinuteSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinuteSignal) ProtoMessage() {}

func (x *MinuteSignal) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinuteSignal.ProtoReflect.Descriptor instead.
func (*MinuteSignal) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{22}
}

func (x *MinuteSignal) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *MinuteSignal) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *MinuteSignal) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *MinuteSignal) GetSignals() map[string]float64 {
	if x != nil {
		return x.Signals
	}
	return nil
}

//Tick信号消息
type TickSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time          int32              `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID   string             `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID string             `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	Signals       map[string]float64 `protobuf:"bytes,4,rep,name=signals,proto3" json:"signals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *TickSignal) Reset() {
	*x = TickSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickSignal) ProtoMessage() {}

func (x *TickSignal) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickSignal.ProtoReflect.Descriptor instead.
func (*TickSignal) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{23}
}

func (x *TickSignal) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TickSignal) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *TickSignal) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *TickSignal) GetSignals() map[string]float64 {
	if x != nil {
		return x.Signals
	}
	return nil
}

type TickIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VolumeInterval     int64   `protobuf:"varint,1,opt,name=volume_interval,json=volumeInterval,proto3" json:"volume_interval,omitempty"`
	NumTradesInterval  int64   `protobuf:"varint,2,opt,name=num_trades_interval,json=numTradesInterval,proto3" json:"num_trades_interval,omitempty"`
	AccuBidSize        float64 `protobuf:"fixed64,3,opt,name=accu_bid_size,json=accuBidSize,proto3" json:"accu_bid_size,omitempty"`
	AccuAskSize        float64 `protobuf:"fixed64,4,opt,name=accu_ask_size,json=accuAskSize,proto3" json:"accu_ask_size,omitempty"`
	UpdownTick         int32   `protobuf:"varint,5,opt,name=updown_tick,json=updownTick,proto3" json:"updown_tick,omitempty"`
	MoneyFlowSmall     float64 `protobuf:"fixed64,6,opt,name=money_flow_small,json=moneyFlowSmall,proto3" json:"money_flow_small,omitempty"`
	MoneyFlowLarge     float64 `protobuf:"fixed64,7,opt,name=money_flow_large,json=moneyFlowLarge,proto3" json:"money_flow_large,omitempty"`
	FillSize           float64 `protobuf:"fixed64,8,opt,name=fill_size,json=fillSize,proto3" json:"fill_size,omitempty"`
	AccuFillSize       float64 `protobuf:"fixed64,9,opt,name=accu_fill_size,json=accuFillSize,proto3" json:"accu_fill_size,omitempty"`
	FillSizePerSec     float64 `protobuf:"fixed64,10,opt,name=fill_size_per_sec,json=fillSizePerSec,proto3" json:"fill_size_per_sec,omitempty"`
	AccuFillSizePerSec float64 `protobuf:"fixed64,11,opt,name=accu_fill_size_per_sec,json=accuFillSizePerSec,proto3" json:"accu_fill_size_per_sec,omitempty"`
	AvgAskSize_1       float64 `protobuf:"fixed64,12,opt,name=avg_ask_size_1,json=avgAskSize1,proto3" json:"avg_ask_size_1,omitempty"`
	AvgAskSize_2       float64 `protobuf:"fixed64,13,opt,name=avg_ask_size_2,json=avgAskSize2,proto3" json:"avg_ask_size_2,omitempty"`
	AvgBidSize_1       float64 `protobuf:"fixed64,14,opt,name=avg_bid_size_1,json=avgBidSize1,proto3" json:"avg_bid_size_1,omitempty"`
	AvgBidSize_2       float64 `protobuf:"fixed64,15,opt,name=avg_bid_size_2,json=avgBidSize2,proto3" json:"avg_bid_size_2,omitempty"`
	AvgSpreed          float64 `protobuf:"fixed64,16,opt,name=avg_spreed,json=avgSpreed,proto3" json:"avg_spreed,omitempty"`
	MinVolatility      float64 `protobuf:"fixed64,17,opt,name=min_volatility,json=minVolatility,proto3" json:"min_volatility,omitempty"`
	Time               int32   `protobuf:"varint,18,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string  `protobuf:"bytes,19,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string  `protobuf:"bytes,20,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
}

func (x *TickIndicator) Reset() {
	*x = TickIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickIndicator) ProtoMessage() {}

func (x *TickIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickIndicator.ProtoReflect.Descriptor instead.
func (*TickIndicator) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{24}
}

func (x *TickIndicator) GetVolumeInterval() int64 {
	if x != nil {
		return x.VolumeInterval
	}
	return 0
}

func (x *TickIndicator) GetNumTradesInterval() int64 {
	if x != nil {
		return x.NumTradesInterval
	}
	return 0
}

func (x *TickIndicator) GetAccuBidSize() float64 {
	if x != nil {
		return x.AccuBidSize
	}
	return 0
}

func (x *TickIndicator) GetAccuAskSize() float64 {
	if x != nil {
		return x.AccuAskSize
	}
	return 0
}

func (x *TickIndicator) GetUpdownTick() int32 {
	if x != nil {
		return x.UpdownTick
	}
	return 0
}

func (x *TickIndicator) GetMoneyFlowSmall() float64 {
	if x != nil {
		return x.MoneyFlowSmall
	}
	return 0
}

func (x *TickIndicator) GetMoneyFlowLarge() float64 {
	if x != nil {
		return x.MoneyFlowLarge
	}
	return 0
}

func (x *TickIndicator) GetFillSize() float64 {
	if x != nil {
		return x.FillSize
	}
	return 0
}

func (x *TickIndicator) GetAccuFillSize() float64 {
	if x != nil {
		return x.AccuFillSize
	}
	return 0
}

func (x *TickIndicator) GetFillSizePerSec() float64 {
	if x != nil {
		return x.FillSizePerSec
	}
	return 0
}

func (x *TickIndicator) GetAccuFillSizePerSec() float64 {
	if x != nil {
		return x.AccuFillSizePerSec
	}
	return 0
}

func (x *TickIndicator) GetAvgAskSize_1() float64 {
	if x != nil {
		return x.AvgAskSize_1
	}
	return 0
}

func (x *TickIndicator) GetAvgAskSize_2() float64 {
	if x != nil {
		return x.AvgAskSize_2
	}
	return 0
}

func (x *TickIndicator) GetAvgBidSize_1() float64 {
	if x != nil {
		return x.AvgBidSize_1
	}
	return 0
}

func (x *TickIndicator) GetAvgBidSize_2() float64 {
	if x != nil {
		return x.AvgBidSize_2
	}
	return 0
}

func (x *TickIndicator) GetAvgSpreed() float64 {
	if x != nil {
		return x.AvgSpreed
	}
	return 0
}

func (x *TickIndicator) GetMinVolatility() float64 {
	if x != nil {
		return x.MinVolatility
	}
	return 0
}

func (x *TickIndicator) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TickIndicator) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *TickIndicator) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

type SecuOrderQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int32   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string  `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string  `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	Side               string  `protobuf:"bytes,4,opt,name=side,proto3" json:"side,omitempty"`                                 //指令交易类型 'B' ;'A'
	Price              float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`                             //订单价格
	Orders             int32   `protobuf:"varint,6,opt,name=orders,proto3" json:"orders,omitempty"`                            //订单明细总数
	ABItems            int32   `protobuf:"varint,7,opt,name=AB_items,json=ABItems,proto3" json:"AB_items,omitempty"`           //订单队列明细个数
	ABVolume           []int32 `protobuf:"varint,8,rep,packed,name=AB_volume,json=ABVolume,proto3" json:"AB_volume,omitempty"` //订单队列明细数量
	ServerReceivedTime int64   `protobuf:"varint,9,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime     int64   `protobuf:"varint,10,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *SecuOrderQueue) Reset() {
	*x = SecuOrderQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuOrderQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuOrderQueue) ProtoMessage() {}

func (x *SecuOrderQueue) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuOrderQueue.ProtoReflect.Descriptor instead.
func (*SecuOrderQueue) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{25}
}

func (x *SecuOrderQueue) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SecuOrderQueue) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *SecuOrderQueue) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *SecuOrderQueue) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *SecuOrderQueue) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecuOrderQueue) GetOrders() int32 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *SecuOrderQueue) GetABItems() int32 {
	if x != nil {
		return x.ABItems
	}
	return 0
}

func (x *SecuOrderQueue) GetABVolume() []int32 {
	if x != nil {
		return x.ABVolume
	}
	return nil
}

func (x *SecuOrderQueue) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *SecuOrderQueue) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

type SecuTransactionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int32   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string  `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string  `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	OrderNum           int32   `protobuf:"varint,4,opt,name=orderNum,proto3" json:"orderNum,omitempty"`
	Price              float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`
	Volume             int64   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
	OrderKind          string  `protobuf:"bytes,7,opt,name=orderKind,proto3" json:"orderKind,omitempty"`
	FunctionCode       string  `protobuf:"bytes,8,opt,name=functionCode,proto3" json:"functionCode,omitempty"`
	ServerReceivedTime int64   `protobuf:"varint,9,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime     int64   `protobuf:"varint,10,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *SecuTransactionOrder) Reset() {
	*x = SecuTransactionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuTransactionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuTransactionOrder) ProtoMessage() {}

func (x *SecuTransactionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuTransactionOrder.ProtoReflect.Descriptor instead.
func (*SecuTransactionOrder) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{26}
}

func (x *SecuTransactionOrder) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SecuTransactionOrder) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *SecuTransactionOrder) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *SecuTransactionOrder) GetOrderNum() int32 {
	if x != nil {
		return x.OrderNum
	}
	return 0
}

func (x *SecuTransactionOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecuTransactionOrder) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SecuTransactionOrder) GetOrderKind() string {
	if x != nil {
		return x.OrderKind
	}
	return ""
}

func (x *SecuTransactionOrder) GetFunctionCode() string {
	if x != nil {
		return x.FunctionCode
	}
	return ""
}

func (x *SecuTransactionOrder) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *SecuTransactionOrder) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

type SecuTransactionTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time               int32   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Exchange_ID        string  `protobuf:"bytes,2,opt,name=exchange_ID,json=exchangeID,proto3" json:"exchange_ID,omitempty"`
	Instrument_ID      string  `protobuf:"bytes,3,opt,name=instrument_ID,json=instrumentID,proto3" json:"instrument_ID,omitempty"`
	Index              int64   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`        //成交编号
	Price              float64 `protobuf:"fixed64,5,opt,name=price,proto3" json:"price,omitempty"`       //成交价格
	Volume             int64   `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`      //成交数量
	Turnover           float64 `protobuf:"fixed64,7,opt,name=turnover,proto3" json:"turnover,omitempty"` //成交金额
	BsFlag             string  `protobuf:"bytes,8,opt,name=bsFlag,proto3" json:"bsFlag,omitempty"`       //内外盘标志：B-外盘，主动买；S-内盘，主动卖，N-未知
	OrderKind          string  `protobuf:"bytes,9,opt,name=orderKind,proto3" json:"orderKind,omitempty"`
	FunctionCode       string  `protobuf:"bytes,10,opt,name=functionCode,proto3" json:"functionCode,omitempty"`
	AskOrder           int32   `protobuf:"varint,11,opt,name=askOrder,proto3" json:"askOrder,omitempty"`
	BidOrder           int32   `protobuf:"varint,12,opt,name=bidOrder,proto3" json:"bidOrder,omitempty"`
	ServerReceivedTime int64   `protobuf:"varint,13,opt,name=server_received_time,json=serverReceivedTime,proto3" json:"server_received_time,omitempty"`
	ServerSentTime     int64   `protobuf:"varint,14,opt,name=server_sent_time,json=serverSentTime,proto3" json:"server_sent_time,omitempty"`
}

func (x *SecuTransactionTrade) Reset() {
	*x = SecuTransactionTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecuTransactionTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecuTransactionTrade) ProtoMessage() {}

func (x *SecuTransactionTrade) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecuTransactionTrade.ProtoReflect.Descriptor instead.
func (*SecuTransactionTrade) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{27}
}

func (x *SecuTransactionTrade) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SecuTransactionTrade) GetExchange_ID() string {
	if x != nil {
		return x.Exchange_ID
	}
	return ""
}

func (x *SecuTransactionTrade) GetInstrument_ID() string {
	if x != nil {
		return x.Instrument_ID
	}
	return ""
}

func (x *SecuTransactionTrade) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SecuTransactionTrade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SecuTransactionTrade) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *SecuTransactionTrade) GetTurnover() float64 {
	if x != nil {
		return x.Turnover
	}
	return 0
}

func (x *SecuTransactionTrade) GetBsFlag() string {
	if x != nil {
		return x.BsFlag
	}
	return ""
}

func (x *SecuTransactionTrade) GetOrderKind() string {
	if x != nil {
		return x.OrderKind
	}
	return ""
}

func (x *SecuTransactionTrade) GetFunctionCode() string {
	if x != nil {
		return x.FunctionCode
	}
	return ""
}

func (x *SecuTransactionTrade) GetAskOrder() int32 {
	if x != nil {
		return x.AskOrder
	}
	return 0
}

func (x *SecuTransactionTrade) GetBidOrder() int32 {
	if x != nil {
		return x.BidOrder
	}
	return 0
}

func (x *SecuTransactionTrade) GetServerReceivedTime() int64 {
	if x != nil {
		return x.ServerReceivedTime
	}
	return 0
}

func (x *SecuTransactionTrade) GetServerSentTime() int64 {
	if x != nil {
		return x.ServerSentTime
	}
	return 0
}

//请求消息集合，把所有的 XxxxxRequest消息全部集合在一起，使用起来类似于C语言的联合体，全部使用字段，任何时刻根据MSG 的id值，最多只有一个有效性， 从程序的逻辑上去保证，编译器（不管是protoc>还是具体语言的编译器都无法保证）
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId            int64                        `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	QrySecuInstruments   *QrySecuInstrumentsRequest   `protobuf:"bytes,2,opt,name=qry_secu_instruments,json=qrySecuInstruments,proto3" json:"qry_secu_instruments,omitempty"`
	QryStockQuotation    *QryStockQuotationRequest    `protobuf:"bytes,3,opt,name=qry_stock_quotation,json=qryStockQuotation,proto3" json:"qry_stock_quotation,omitempty"`
	QryFutureQuotation   *QryFutureQuotationRequest   `protobuf:"bytes,4,opt,name=qry_future_quotation,json=qryFutureQuotation,proto3" json:"qry_future_quotation,omitempty"`
	QryTickIndicator     *QryTickIndicatorRequest     `protobuf:"bytes,5,opt,name=qry_tick_indicator,json=qryTickIndicator,proto3" json:"qry_tick_indicator,omitempty"`
	QryMinuteIndicator   *QryMinuteIndicatorRequest   `protobuf:"bytes,6,opt,name=qry_minute_indicator,json=qryMinuteIndicator,proto3" json:"qry_minute_indicator,omitempty"`
	QryFutureInstruments *QryFutureInstrumentsRequest `protobuf:"bytes,7,opt,name=qry_future_instruments,json=qryFutureInstruments,proto3" json:"qry_future_instruments,omitempty"`
	QryIndexQuotation    *QryIndexQuotationRequest    `protobuf:"bytes,8,opt,name=qry_index_quotation,json=qryIndexQuotation,proto3" json:"qry_index_quotation,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{28}
}

func (x *Request) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Request) GetQrySecuInstruments() *QrySecuInstrumentsRequest {
	if x != nil {
		return x.QrySecuInstruments
	}
	return nil
}

func (x *Request) GetQryStockQuotation() *QryStockQuotationRequest {
	if x != nil {
		return x.QryStockQuotation
	}
	return nil
}

func (x *Request) GetQryFutureQuotation() *QryFutureQuotationRequest {
	if x != nil {
		return x.QryFutureQuotation
	}
	return nil
}

func (x *Request) GetQryTickIndicator() *QryTickIndicatorRequest {
	if x != nil {
		return x.QryTickIndicator
	}
	return nil
}

func (x *Request) GetQryMinuteIndicator() *QryMinuteIndicatorRequest {
	if x != nil {
		return x.QryMinuteIndicator
	}
	return nil
}

func (x *Request) GetQryFutureInstruments() *QryFutureInstrumentsRequest {
	if x != nil {
		return x.QryFutureInstruments
	}
	return nil
}

func (x *Request) GetQryIndexQuotation() *QryIndexQuotationRequest {
	if x != nil {
		return x.QryIndexQuotation
	}
	return nil
}

//与Request作用相同，把所有的XxxxResponse消息集合在一起，当作联合体使用，不过额外多了几个字段用于表示应答的结果
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success              bool                  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` //true表示应答成功，false表示应答失败
	Last                 bool                  `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`       // 一个请求可以包含多个应答，用于指示是否为最后一个应答
	Info                 string                `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`        // success == false时，用于描述错误信息
	RequestId            int64                 `protobuf:"varint,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	SecuInstrumentList   *SecuInstrumentList   `protobuf:"bytes,5,opt,name=secu_instrument_list,json=secuInstrumentList,proto3" json:"secu_instrument_list,omitempty"`
	FutureInstrumentList *FutureInstrumentList `protobuf:"bytes,6,opt,name=future_instrument_list,json=futureInstrumentList,proto3" json:"future_instrument_list,omitempty"`
	StockQuotationList   *StockQuotationList   `protobuf:"bytes,7,opt,name=stock_quotation_list,json=stockQuotationList,proto3" json:"stock_quotation_list,omitempty"`
	IndexQuotationList   *IndexQuotationList   `protobuf:"bytes,8,opt,name=index_quotation_list,json=indexQuotationList,proto3" json:"index_quotation_list,omitempty"`
	FutureQuotationList  *FutureQuotationList  `protobuf:"bytes,9,opt,name=future_quotation_list,json=futureQuotationList,proto3" json:"future_quotation_list,omitempty"`
	TickIndicatorList    *TickIndicatorList    `protobuf:"bytes,10,opt,name=tick_indicator_list,json=tickIndicatorList,proto3" json:"tick_indicator_list,omitempty"`
	MinuteIndicatorList  *MinuteIndicatorList  `protobuf:"bytes,11,opt,name=minute_indicator_list,json=minuteIndicatorList,proto3" json:"minute_indicator_list,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{29}
}

func (x *Response) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Response) GetLast() bool {
	if x != nil {
		return x.Last
	}
	return false
}

func (x *Response) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *Response) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *Response) GetSecuInstrumentList() *SecuInstrumentList {
	if x != nil {
		return x.SecuInstrumentList
	}
	return nil
}

func (x *Response) GetFutureInstrumentList() *FutureInstrumentList {
	if x != nil {
		return x.FutureInstrumentList
	}
	return nil
}

func (x *Response) GetStockQuotationList() *StockQuotationList {
	if x != nil {
		return x.StockQuotationList
	}
	return nil
}

func (x *Response) GetIndexQuotationList() *IndexQuotationList {
	if x != nil {
		return x.IndexQuotationList
	}
	return nil
}

func (x *Response) GetFutureQuotationList() *FutureQuotationList {
	if x != nil {
		return x.FutureQuotationList
	}
	return nil
}

func (x *Response) GetTickIndicatorList() *TickIndicatorList {
	if x != nil {
		return x.TickIndicatorList
	}
	return nil
}

func (x *Response) GetMinuteIndicatorList() *MinuteIndicatorList {
	if x != nil {
		return x.MinuteIndicatorList
	}
	return nil
}

//与Request相同,把所有的XxxxxNotification消息集合在一起当作联合体使用.
type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Heartbeat        *Heartbeat            `protobuf:"bytes,1,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
	StockQuotation   *StockQuotation       `protobuf:"bytes,2,opt,name=stock_quotation,json=stockQuotation,proto3" json:"stock_quotation,omitempty"`
	IndexQuotation   *IndexQuotation       `protobuf:"bytes,3,opt,name=index_quotation,json=indexQuotation,proto3" json:"index_quotation,omitempty"`
	FutureQuotation  *FutureQuotation      `protobuf:"bytes,4,opt,name=future_quotation,json=futureQuotation,proto3" json:"future_quotation,omitempty"`
	TickIndicator    *TickIndicator        `protobuf:"bytes,5,opt,name=tick_indicator,json=tickIndicator,proto3" json:"tick_indicator,omitempty"`
	MinuteIndicator  *MinuteIndicator      `protobuf:"bytes,6,opt,name=minute_indicator,json=minuteIndicator,proto3" json:"minute_indicator,omitempty"`
	OptionQuotation  *OptionQuotation      `protobuf:"bytes,7,opt,name=option_quotation,json=optionQuotation,proto3" json:"option_quotation,omitempty"`
	OrderQueue       *SecuOrderQueue       `protobuf:"bytes,8,opt,name=order_queue,json=orderQueue,proto3" json:"order_queue,omitempty"`
	TransactionOrder *SecuTransactionOrder `protobuf:"bytes,9,opt,name=transaction_order,json=transactionOrder,proto3" json:"transaction_order,omitempty"`
	TransactionTrade *SecuTransactionTrade `protobuf:"bytes,10,opt,name=transaction_trade,json=transactionTrade,proto3" json:"transaction_trade,omitempty"`
	SecuInstrument   *SecuInstrument       `protobuf:"bytes,11,opt,name=secu_instrument,json=secuInstrument,proto3" json:"secu_instrument,omitempty"`
	FutureInstrument *FutureInstrument     `protobuf:"bytes,12,opt,name=future_instrument,json=futureInstrument,proto3" json:"future_instrument,omitempty"`
	MinuteSignal     *MinuteSignal         `protobuf:"bytes,13,opt,name=minute_signal,json=minuteSignal,proto3" json:"minute_signal,omitempty"`
	TickSignal       *TickSignal           `protobuf:"bytes,14,opt,name=tick_signal,json=tickSignal,proto3" json:"tick_signal,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{30}
}

func (x *Notify) GetHeartbeat() *Heartbeat {
	if x != nil {
		return x.Heartbeat
	}
	return nil
}

func (x *Notify) GetStockQuotation() *StockQuotation {
	if x != nil {
		return x.StockQuotation
	}
	return nil
}

func (x *Notify) GetIndexQuotation() *IndexQuotation {
	if x != nil {
		return x.IndexQuotation
	}
	return nil
}

func (x *Notify) GetFutureQuotation() *FutureQuotation {
	if x != nil {
		return x.FutureQuotation
	}
	return nil
}

func (x *Notify) GetTickIndicator() *TickIndicator {
	if x != nil {
		return x.TickIndicator
	}
	return nil
}

func (x *Notify) GetMinuteIndicator() *MinuteIndicator {
	if x != nil {
		return x.MinuteIndicator
	}
	return nil
}

func (x *Notify) GetOptionQuotation() *OptionQuotation {
	if x != nil {
		return x.OptionQuotation
	}
	return nil
}

func (x *Notify) GetOrderQueue() *SecuOrderQueue {
	if x != nil {
		return x.OrderQueue
	}
	return nil
}

func (x *Notify) GetTransactionOrder() *SecuTransactionOrder {
	if x != nil {
		return x.TransactionOrder
	}
	return nil
}

func (x *Notify) GetTransactionTrade() *SecuTransactionTrade {
	if x != nil {
		return x.TransactionTrade
	}
	return nil
}

func (x *Notify) GetSecuInstrument() *SecuInstrument {
	if x != nil {
		return x.SecuInstrument
	}
	return nil
}

func (x *Notify) GetFutureInstrument() *FutureInstrument {
	if x != nil {
		return x.FutureInstrument
	}
	return nil
}

func (x *Notify) GetMinuteSignal() *MinuteSignal {
	if x != nil {
		return x.MinuteSignal
	}
	return nil
}

func (x *Notify) GetTickSignal() *TickSignal {
	if x != nil {
		return x.TickSignal
	}
	return nil
}

//顶层消息，包含所有的Request，Response，Notification，具体包含哪个消息又msg_type字段决定，程序逻辑去保证msg_type和具体的消息进行匹配
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType   MsgType   `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3,enum=pb.MsgType" json:"msg_type,omitempty"`
	Sequence  uint64    `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"` //消息系列号
	SessionId uint32    `protobuf:"fixed32,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Request   *Request  `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	Response  *Response `protobuf:"bytes,5,opt,name=response,proto3" json:"response,omitempty"`
	Notify    *Notify   `protobuf:"bytes,6,opt,name=notify,proto3" json:"notify,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mds_message_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_mds_message_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_mds_message_proto_rawDescGZIP(), []int{31}
}

func (x *Message) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_Heartbeat_Notify
}

func (x *Message) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Message) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Message) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Message) GetResponse() *Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Message) GetNotify() *Notify {
	if x != nil {
		return x.Notify
	}
	return nil
}

var File_mds_message_proto protoreflect.FileDescriptor

var file_mds_message_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x0b, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x22, 0x61, 0x0a, 0x19, 0x51, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x10,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x22, 0x5f, 0x0a, 0x17, 0x51, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x4f, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x51, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x51, 0x72, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x12, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x61, 0x0a, 0x19, 0x51, 0x72, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x13, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x19,
	0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x53, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x63, 0x0a, 0x1b, 0x51, 0x72, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x14, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x12, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x11, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x74, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xb0, 0x03, 0x0a,
	0x10, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x70, 0x72, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0xac, 0x03, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xba,
	0x07, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69,
	0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x66, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x66, 0x74, 0x65, 0x72, 0x54, 0x75, 0x72, 0x6e, 0x6f,
	0x76, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68,
	0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x4f, 0x50, 0x56, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x49, 0x4f, 0x50, 0x56, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x64,
	0x56, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x5f, 0x61,
	0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x61, 0x76, 0x67, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61,
	0x76, 0x67, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x05, 0x0a, 0x0f,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68,
	0x69, 0x67, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x05, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x62,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x5f, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x64, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x64, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x0a, 0x54,
	0x69, 0x63, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x05, 0x0a, 0x0d, 0x54, 0x69, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x75, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x42, 0x69,
	0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x75, 0x5f, 0x61, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x75, 0x41, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x5f, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x63, 0x63, 0x75, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x75, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x29, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x69,
	0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x16,
	0x61, 0x63, 0x63, 0x75, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x63,
	0x63, 0x75, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x23, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x41, 0x73, 0x6b,
	0x53, 0x69, 0x7a, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61,
	0x76, 0x67, 0x41, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x12, 0x23, 0x0a, 0x0e, 0x61, 0x76,
	0x67, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x31, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x42, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x31, 0x12,
	0x23, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x42, 0x69, 0x64, 0x53,
	0x69, 0x7a, 0x65, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x67, 0x5f, 0x73, 0x70, 0x72, 0x65,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x76, 0x67, 0x53, 0x70, 0x72,
	0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0xc0, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x41, 0x42, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x41, 0x42, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x41, 0x42, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x08, 0x41, 0x42, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x75, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x75, 0x72,
	0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x73, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62,
	0x69, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xd9, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4f,
	0x0a, 0x14, 0x71, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x72, 0x79, 0x53, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x71, 0x72, 0x79,
	0x53, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x4c, 0x0a, 0x13, 0x71, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x62, 0x2e, 0x51, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x71, 0x72, 0x79, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x14, 0x71, 0x72, 0x79, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x51, 0x72, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x71, 0x72, 0x79, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x12, 0x71, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e,
	0x51, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x71, 0x72, 0x79, 0x54, 0x69, 0x63, 0x6b,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x14, 0x71, 0x72, 0x79,
	0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x51, 0x72, 0x79,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12, 0x71, 0x72, 0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x16, 0x71, 0x72,
	0x79, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e,
	0x51, 0x72, 0x79, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x14, 0x71, 0x72, 0x79,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x13, 0x71, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x51, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x71, 0x72,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xfa, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a,
	0x14, 0x73, 0x65, 0x63, 0x75, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x12, 0x73, 0x65, 0x63, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x14, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x15, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x13, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x13, 0x74, 0x69, 0x63, 0x6b,
	0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x11, 0x74, 0x69,
	0x63, 0x6b, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4b, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd4, 0x06, 0x0a,
	0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x10, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x73,
	0x65, 0x63, 0x75, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x11, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0d, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x2a, 0x96, 0x07, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x5f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1c, 0x51, 0x72, 0x79,
	0x5f, 0x53, 0x65, 0x63, 0x75, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x91, 0x4e, 0x12, 0x22, 0x0a, 0x1d,
	0x51, 0x72, 0x79, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x92, 0x4e,
	0x12, 0x20, 0x0a, 0x1b, 0x51, 0x72, 0x79, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x93, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x51, 0x72, 0x79, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x94, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x51, 0x72, 0x79, 0x5f, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x95, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x51, 0x72,
	0x79, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x96, 0x4e,
	0x12, 0x21, 0x0a, 0x1c, 0x51, 0x72, 0x79, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x97, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x51, 0x72, 0x79, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x98, 0x4e, 0x12, 0x1f, 0x0a, 0x1a, 0x51, 0x72, 0x79, 0x5f, 0x54,
	0x69, 0x63, 0x6b, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x90, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x51, 0x72, 0x79, 0x5f,
	0x54, 0x69, 0x63, 0x6b, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9a, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x51, 0x72,
	0x79, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x9b, 0x4e, 0x12, 0x22, 0x0a,
	0x1d, 0x51, 0x72, 0x79, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9c,
	0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x51, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x9d, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x51, 0x72, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x9e, 0x4e, 0x12, 0x1c, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x10, 0xa1, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0xa2,
	0x9c, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x10, 0xa3, 0x9c,
	0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xa4, 0x9c, 0x01,
	0x12, 0x1b, 0x0a, 0x15, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x1d, 0x0a,
	0x17, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0xa7, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x10, 0xa8, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0xa9, 0x9c, 0x01, 0x12, 0x1c, 0x0a, 0x16,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x5f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xaa, 0x9c, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0xab, 0x9c, 0x01, 0x12, 0x1a, 0x0a, 0x14, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x10, 0xac, 0x9c, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x54, 0x69, 0x63, 0x6b, 0x10, 0xad, 0x9c, 0x01,
	0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mds_message_proto_rawDescOnce sync.Once
	file_mds_message_proto_rawDescData = file_mds_message_proto_rawDesc
)

func file_mds_message_proto_rawDescGZIP() []byte {
	file_mds_message_proto_rawDescOnce.Do(func() {
		file_mds_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_mds_message_proto_rawDescData)
	})
	return file_mds_message_proto_rawDescData
}

var file_mds_message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mds_message_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_mds_message_proto_goTypes = []interface{}{
	(MsgType)(0),                        // 0: pb.MsgType
	(*Heartbeat)(nil),                   // 1: pb.Heartbeat
	(*QryMinuteIndicatorRequest)(nil),   // 2: pb.QryMinuteIndicatorRequest
	(*MinuteIndicatorList)(nil),         // 3: pb.MinuteIndicatorList
	(*QryTickIndicatorRequest)(nil),     // 4: pb.QryTickIndicatorRequest
	(*TickIndicatorList)(nil),           // 5: pb.TickIndicatorList
	(*QryStockQuotationRequest)(nil),    // 6: pb.QryStockQuotationRequest
	(*StockQuotationList)(nil),          // 7: pb.StockQuotationList
	(*QryIndexQuotationRequest)(nil),    // 8: pb.QryIndexQuotationRequest
	(*IndexQuotationList)(nil),          // 9: pb.IndexQuotationList
	(*QryFutureQuotationRequest)(nil),   // 10: pb.QryFutureQuotationRequest
	(*FutureQuotationList)(nil),         // 11: pb.FutureQuotationList
	(*QrySecuInstrumentsRequest)(nil),   // 12: pb.QrySecuInstrumentsRequest
	(*SecuInstrumentList)(nil),          // 13: pb.SecuInstrumentList
	(*QryFutureInstrumentsRequest)(nil), // 14: pb.QryFutureInstrumentsRequest
	(*FutureInstrumentList)(nil),        // 15: pb.FutureInstrumentList
	(*SecuInstrument)(nil),              // 16: pb.SecuInstrument
	(*FutureInstrument)(nil),            // 17: pb.FutureInstrument
	(*IndexQuotation)(nil),              // 18: pb.IndexQuotation
	(*StockQuotation)(nil),              // 19: pb.StockQuotation
	(*FutureQuotation)(nil),             // 20: pb.FutureQuotation
	(*OptionQuotation)(nil),             // 21: pb.OptionQuotation
	(*MinuteIndicator)(nil),             // 22: pb.MinuteIndicator
	(*MinuteSignal)(nil),                // 23: pb.MinuteSignal
	(*TickSignal)(nil),                  // 24: pb.TickSignal
	(*TickIndicator)(nil),               // 25: pb.TickIndicator
	(*SecuOrderQueue)(nil),              // 26: pb.SecuOrderQueue
	(*SecuTransactionOrder)(nil),        // 27: pb.SecuTransactionOrder
	(*SecuTransactionTrade)(nil),        // 28: pb.SecuTransactionTrade
	(*Request)(nil),                     // 29: pb.Request
	(*Response)(nil),                    // 30: pb.Response
	(*Notify)(nil),                      // 31: pb.Notify
	(*Message)(nil),                     // 32: pb.Message
	nil,                                 // 33: pb.MinuteIndicator.IndicatorsEntry
	nil,                                 // 34: pb.MinuteSignal.SignalsEntry
	nil,                                 // 35: pb.TickSignal.SignalsEntry
}
var file_mds_message_proto_depIdxs = []int32{
	22, // 0: pb.MinuteIndicatorList.minute_indicators:type_name -> pb.MinuteIndicator
	25, // 1: pb.TickIndicatorList.tick_indicators:type_name -> pb.TickIndicator
	19, // 2: pb.StockQuotationList.stock_quotations:type_name -> pb.StockQuotation
	18, // 3: pb.IndexQuotationList.index_quotations:type_name -> pb.IndexQuotation
	20, // 4: pb.FutureQuotationList.future_quotations:type_name -> pb.FutureQuotation
	16, // 5: pb.SecuInstrumentList.secu_instruments:type_name -> pb.SecuInstrument
	17, // 6: pb.FutureInstrumentList.future_instruments:type_name -> pb.FutureInstrument
	33, // 7: pb.MinuteIndicator.indicators:type_name -> pb.MinuteIndicator.IndicatorsEntry
	34, // 8: pb.MinuteSignal.signals:type_name -> pb.MinuteSignal.SignalsEntry
	35, // 9: pb.TickSignal.signals:type_name -> pb.TickSignal.SignalsEntry
	12, // 10: pb.Request.qry_secu_instruments:type_name -> pb.QrySecuInstrumentsRequest
	6,  // 11: pb.Request.qry_stock_quotation:type_name -> pb.QryStockQuotationRequest
	10, // 12: pb.Request.qry_future_quotation:type_name -> pb.QryFutureQuotationRequest
	4,  // 13: pb.Request.qry_tick_indicator:type_name -> pb.QryTickIndicatorRequest
	2,  // 14: pb.Request.qry_minute_indicator:type_name -> pb.QryMinuteIndicatorRequest
	14, // 15: pb.Request.qry_future_instruments:type_name -> pb.QryFutureInstrumentsRequest
	8,  // 16: pb.Request.qry_index_quotation:type_name -> pb.QryIndexQuotationRequest
	13, // 17: pb.Response.secu_instrument_list:type_name -> pb.SecuInstrumentList
	15, // 18: pb.Response.future_instrument_list:type_name -> pb.FutureInstrumentList
	7,  // 19: pb.Response.stock_quotation_list:type_name -> pb.StockQuotationList
	9,  // 20: pb.Response.index_quotation_list:type_name -> pb.IndexQuotationList
	11, // 21: pb.Response.future_quotation_list:type_name -> pb.FutureQuotationList
	5,  // 22: pb.Response.tick_indicator_list:type_name -> pb.TickIndicatorList
	3,  // 23: pb.Response.minute_indicator_list:type_name -> pb.MinuteIndicatorList
	1,  // 24: pb.Notify.heartbeat:type_name -> pb.Heartbeat
	19, // 25: pb.Notify.stock_quotation:type_name -> pb.StockQuotation
	18, // 26: pb.Notify.index_quotation:type_name -> pb.IndexQuotation
	20, // 27: pb.Notify.future_quotation:type_name -> pb.FutureQuotation
	25, // 28: pb.Notify.tick_indicator:type_name -> pb.TickIndicator
	22, // 29: pb.Notify.minute_indicator:type_name -> pb.MinuteIndicator
	21, // 30: pb.Notify.option_quotation:type_name -> pb.OptionQuotation
	26, // 31: pb.Notify.order_queue:type_name -> pb.SecuOrderQueue
	27, // 32: pb.Notify.transaction_order:type_name -> pb.SecuTransactionOrder
	28, // 33: pb.Notify.transaction_trade:type_name -> pb.SecuTransactionTrade
	16, // 34: pb.Notify.secu_instrument:type_name -> pb.SecuInstrument
	17, // 35: pb.Notify.future_instrument:type_name -> pb.FutureInstrument
	23, // 36: pb.Notify.minute_signal:type_name -> pb.MinuteSignal
	24, // 37: pb.Notify.tick_signal:type_name -> pb.TickSignal
	0,  // 38: pb.Message.msg_type:type_name -> pb.MsgType
	29, // 39: pb.Message.request:type_name -> pb.Request
	30, // 40: pb.Message.response:type_name -> pb.Response
	31, // 41: pb.Message.notify:type_name -> pb.Notify
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_mds_message_proto_init() }
func file_mds_message_proto_init() {
	if File_mds_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mds_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryMinuteIndicatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinuteIndicatorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryTickIndicatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickIndicatorList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryStockQuotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuotationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryIndexQuotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexQuotationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryFutureQuotationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureQuotationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QrySecuInstrumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuInstrumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QryFutureInstrumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureInstrumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureInstrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexQuotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockQuotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureQuotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionQuotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinuteIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinuteSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuOrderQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuTransactionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecuTransactionTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mds_message_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mds_message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mds_message_proto_goTypes,
		DependencyIndexes: file_mds_message_proto_depIdxs,
		EnumInfos:         file_mds_message_proto_enumTypes,
		MessageInfos:      file_mds_message_proto_msgTypes,
	}.Build()
	File_mds_message_proto = out.File
	file_mds_message_proto_rawDesc = nil
	file_mds_message_proto_goTypes = nil
	file_mds_message_proto_depIdxs = nil
}
